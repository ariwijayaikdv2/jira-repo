name: CI/CD Pipeline for Golang App

on:
  push:
    branches:
      - staging
      - production

  pull_request:
    branches:
      - staging

env:
  REGISTRY: registry-pd.dikti.go.id
  IMAGE_NAME: jira-repo/be
  IMAGE_TAG: v0.0.1.${{ github.run_number }}
  IMAGE_TAG_LATEST: latest
  REGISTRY_GH: ghcr.io
  IMAGE_NAME_GH: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.ref == 'refs/heads/staging'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'

      - name: Run Unit Tests
        run: go test ./...
        continue-on-error: true

  build-binary:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/staging'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'

      - name: Build Application
        run: go build -o jira-repo-app ./cmd/bin/main.go

      - name: Create Artifact
        uses: actions/upload-artifact@v4
        with:
          name: jira-repo-${{ env.IMAGE_TAG }}
          path: jira-repo

  build-docker:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/staging'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to ${{ env.REGISTRY_GH }}
        if: ${{ github.event_name != 'pull_request' }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_GH }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to ${{ env.REGISTRY }}
        if: ${{ github.event_name != 'pull_request' }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.USER_REGISTRY }}
          password: ${{ secrets.PASSWORD_REGISTRY }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_GH }}/${{ env.IMAGE_NAME_GH }}

      - name: Build push ${{ env.REGISTRY_GH }} and ${{ env.REGISTRY }}
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.REGISTRY_GH }}/${{ env.IMAGE_NAME_GH }}:${{ env.IMAGE_TAG }} , ${{ env.REGISTRY_GH }}/${{ env.IMAGE_NAME_GH }}:${{ env.IMAGE_TAG_LATEST }} ,
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} , ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG_LATEST }}
          labels: ${{ steps.meta.outputs.labels }}


  # deploy-staging:
  #   needs: [ build ]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Build on server
  #       uses: appleboy/ssh-action@master
  #       with:
  #         host: ${{ secrets.HOST }}
  #         username: ${{ secrets.USERNAME }}
  #         password: ${{ secrets.PASSWORD }}
  #         port: ${{ secrets.PORT }}
  #         script: |
  #           bash ./deploybe.sh

  publish-release:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'push' && github.ref == 'refs/heads/production'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Generate Changelog
        id: changelog
        run: |
          echo "## Changelog" > CHANGELOG.md
          git log --pretty=format:"- %h %s (%an)" >> CHANGELOG.md
          echo "::set-output name=changelog::$(cat CHANGELOG.md)"

      - name: Create GitHub Release
        uses: elgohr/Github-Release-Action@v5
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        permissions:
          packages: write
          contents: write
        with:
          title: jira-app-${{ env.IMAGE_TAG }}
          tag: ${{ env.IMAGE_TAG }}
          prerelease: false
          body: ${{ steps.changelog.outputs.changelog }}  # Gunakan changelog sebagai body release

      - name: Upload Binary to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: ./jira-repo-app
          asset_name: jira-repo-app
          asset_content_type: application/octet-stream

      - name: Upload Docker Image Info to Release
        run: |
          echo "Docker Ghcr Latest: ghcr.io/${{ env.REGISTRY_GH }}/${{ env.IMAGE_NAME_GH }}:${{ env.IMAGE_TAG_LATEST }}" >> release-info.txt
          echo "Docker Ghcr Tag: ghcr.io/${{ env.REGISTRY_GH }}/${{ env.IMAGE_NAME_GH }}:${{ env.IMAGE_TAG }}" >> release-info.txt
          
          echo "PDDikti Docker Regitry Latest: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG_LATEST }}" >> release-info.txt
          echo "PDDikti Docker Registry Tag: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} , 
        shell: bash

      - name: Upload Docker Image Info as Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: ./release-info.txt
          asset_name: release-info-${{ env.IMAGE_TAG }}.txt
          asset_content_type: text/plain


  # deploy-production:
  #   # needs: [ build ]
  #   runs-on: pddiktifp-be
  #   steps:
  #     - name: Build on server
  #       uses: appleboy/ssh-action@master
  #       with:
  #         host: ${{ secrets.HOST }}
  #         username: ${{ secrets.USERNAME }}
  #         password: ${{ secrets.PASSWORD }}
  #         port: ${{ secrets.PORT }}
  #         script: |
  #           bash ./deploybe.sh